
#include "structures.fxh"

StructuredBuffer<BoxAttribs>  g_BoxAttribs;

[shader("intersection")]
void main()
{
    // Calculate sphere center and radius.
    float3      boxOff    = WorldToObject4x3()[3];
    float3      rayDir    = WorldRayDirection();
    BoxAttribs  box       = g_BoxAttribs[InstanceID()];
    float3      boxMin    = float3(box.minX, box.minY, box.minZ);
    float3      boxMax    = float3(box.maxX, box.maxY, box.maxZ);
    float3      boxSize   = boxMax - boxMin;
    float3      center    = (boxMax + boxMin) * 0.5;
    float       radius    = min(boxSize.x, min(boxSize.y, boxSize.z)) * 0.5;

    // Test sphere and ray intersection.
    float3 oc = WorldRayOrigin() - center + boxOff;
    float  a  = dot(rayDir, rayDir);
    float  b  = 2.0 * dot(oc, rayDir);
    float  c  = dot(oc, oc) - radius * radius;
    float  d  = b * b - 4 * a * c;

    if (d >= 0)
    {
        // Calcule intersection point and normal.
        float  hitT = (-b - sqrt(d)) / (2.0 * a);
        float3 pos  = WorldRayOrigin() + rayDir * hitT + boxOff;

        ProceduralGeomIntersectionAttribs attr;
        attr.Normal = normalize(pos - center);
        ReportHit(hitT, RAY_KIND_PROCEDURAL_FRONT_FACE, attr);
    }
}
