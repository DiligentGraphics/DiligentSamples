#include "Structures.fxh"

cbuffer DrawConstantsCB
{
    DrawConstants g_Constants;
};

cbuffer TerrainConstantsCB
{
    TerrainConstants g_TerrainConstants;
};

Texture2D<float4> g_TerrainNormalMap;
SamplerState      g_TerrainNormalMap_sampler;

Texture2D<float4> g_TerrainDiffuseMap;
SamplerState      g_TerrainDiffuseMap_sampler;

struct PSInput
{
    float4 Pos : SV_POSITION;
    float2 UV  : TEX_COORD;
};

struct PSOutput
{
    float4 Color : SV_Target0;
};


void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    // Sample smooth normals
    float3 Norm = g_TerrainNormalMap.Sample(g_TerrainNormalMap_sampler, PSIn.UV).xyz;
    Norm = normalize(mul(Norm, (float3x3)(g_Constants.NormalMat)));
    float NdotL = max(g_Constants.AmbientLight, dot(Norm, g_Constants.LightDir));

    float2 TexUV = PSIn.UV;
    TexUV *= g_TerrainConstants.UVScale;
    TexUV.x += g_TerrainConstants.XOffset;
    PSOut.Color = NdotL * g_TerrainDiffuseMap.Sample(g_TerrainDiffuseMap_sampler, TexUV);
    PSOut.Color.a = 0.0; // Alpha channel is used for self-emission
}
